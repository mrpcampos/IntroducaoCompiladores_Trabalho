"C:\Program Files\Java\jdk-12\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2018.3.5\lib\idea_rt.jar=59613:C:\Program Files\JetBrains\IntelliJ IDEA 2018.3.5\bin" -Dfile.encoding=UTF-8 -classpath "C:\Projetos\Implementação de Compilador\out\production\Implementação de Compilador" parser.langX -debug_AS -print_tree "C:\Projetos\Implementação de Compilador\out\production\Implementação de Compilador\testeSemErros.test"
X++ Compiler - Version 1.0 - 2004
Reading from file C:\Projetos\Implementação de Compilador\out\production\Implementação de Compilador\testeSemErros.test . . .
Call:   program
  Call:   classlist
    Call:   classdecl
      Consumed token: <"public" at line 3 column 1>
      Consumed token: <"class" at line 3 column 8>
      Consumed token: <<IDENT>: "testeCompila" at line 3 column 14>
      Call:   classbody
        Consumed token: <"{" at line 3 column 27>
        Call:   classlist(LOOKING AHEAD...)
          Call:   classdecl(LOOKING AHEAD...)
            Visited token: <"private" at line 6 column 9>; Expected token: <"public">
            Visited token: <"private" at line 6 column 9>; Expected token: <"private">
            Visited token: <"final" at line 6 column 17>; Expected token: <"class">
          Return: classdecl(LOOKAHEAD FAILED)
        Return: classlist(LOOKAHEAD FAILED)
        Call:   vardecl(LOOKING AHEAD...)
          Visited token: <"private" at line 6 column 9>; Expected token: <"public">
          Visited token: <"private" at line 6 column 9>; Expected token: <"private">
          Visited token: <"final" at line 6 column 17>; Expected token: <"final">
          Visited token: <"int" at line 6 column 23>; Expected token: <"int">
          Visited token: <<IDENT>: "variavelByte1" at line 6 column 27>; Expected token: <<IDENT>>
          Visited token: <";" at line 6 column 40>; Expected token: <"[">
          Visited token: <";" at line 6 column 40>; Expected token: <",">
        Return: vardecl(LOOKAHEAD SUCCEEDED)
        Visited token: <";" at line 6 column 40>; Expected token: <";">
        Call:   vardecl
          Consumed token: <"private" at line 6 column 9>
          Consumed token: <"final" at line 6 column 17>
          Consumed token: <"int" at line 6 column 23>
          Consumed token: <<IDENT>: "variavelByte1" at line 6 column 27>
        Return: vardecl
        Consumed token: <";" at line 6 column 40>
        Call:   classlist(LOOKING AHEAD...)
          Call:   classdecl(LOOKING AHEAD...)
            Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"public">
            Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"private">
            Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"protected">
            Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"class">
          Return: classdecl(LOOKAHEAD FAILED)
        Return: classlist(LOOKAHEAD FAILED)
        Call:   vardecl(LOOKING AHEAD...)
          Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"public">
          Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"private">
          Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"protected">
          Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"final">
          Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"int">
          Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <"string">
          Visited token: <<IDENT>: "variavelByte1" at line 7 column 9>; Expected token: <<IDENT>>
          Visited token: <"=" at line 7 column 23>; Expected token: <<IDENT>>
        Return: vardecl(LOOKAHEAD FAILED)
        Call:   atribstat
          Call:   lvalue
            Consumed token: <<IDENT>: "variavelByte1" at line 7 column 9>
          Return: lvalue
          Consumed token: <"=" at line 7 column 23>
          Call:   expression
            Call:   notExpression(LOOKING AHEAD...)
              Visited token: <<int_constant>: "22" at line 7 column 25>; Expected token: <"!">
            Return: notExpression(LOOKAHEAD FAILED)
            Call:   numcompexpr
              Call:   numexpr
                Call:   term
                  Call:   unaryexpr
                    Call:   factor
                      Consumed token: <<int_constant>: "22" at line 7 column 25>
                    Return: factor
                  Return: unaryexpr
                Return: term
              Return: numexpr
            Return: numcompexpr
          Return: expression
        Return: atribstat
        Consumed token: <";" at line 7 column 27>
        Call:   classlist(LOOKING AHEAD...)
          Call:   classdecl(LOOKING AHEAD...)
            Visited token: <"float" at line 8 column 9>; Expected token: <"public">
            Visited token: <"float" at line 8 column 9>; Expected token: <"private">
            Visited token: <"float" at line 8 column 9>; Expected token: <"protected">
            Visited token: <"float" at line 8 column 9>; Expected token: <"class">
          Return: classdecl(LOOKAHEAD FAILED)
        Return: classlist(LOOKAHEAD FAILED)
        Call:   vardecl(LOOKING AHEAD...)
          Visited token: <"float" at line 8 column 9>; Expected token: <"public">
          Visited token: <"float" at line 8 column 9>; Expected token: <"private">
          Visited token: <"float" at line 8 column 9>; Expected token: <"protected">
          Visited token: <"float" at line 8 column 9>; Expected token: <"final">
          Visited token: <"float" at line 8 column 9>; Expected token: <"int">
          Visited token: <"float" at line 8 column 9>; Expected token: <"string">
          Visited token: <"float" at line 8 column 9>; Expected token: <<IDENT>>
          Visited token: <"float" at line 8 column 9>; Expected token: <"byte">
          Visited token: <"float" at line 8 column 9>; Expected token: <"short">
          Visited token: <"float" at line 8 column 9>; Expected token: <"long">
          Visited token: <"float" at line 8 column 9>; Expected token: <"float">
          Visited token: <<IDENT>: "f" at line 8 column 15>; Expected token: <<IDENT>>
          Visited token: <";" at line 8 column 16>; Expected token: <"[">
          Visited token: <";" at line 8 column 16>; Expected token: <",">
        Return: vardecl(LOOKAHEAD SUCCEEDED)
        Visited token: <";" at line 8 column 16>; Expected token: <";">
        Call:   vardecl
          Consumed token: <"float" at line 8 column 9>
          Consumed token: <<IDENT>: "f" at line 8 column 15>
        Return: vardecl
        Consumed token: <";" at line 8 column 16>
        Call:   classlist(LOOKING AHEAD...)
          Call:   classdecl(LOOKING AHEAD...)
            Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"public">
            Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"private">
            Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"protected">
            Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"class">
          Return: classdecl(LOOKAHEAD FAILED)
        Return: classlist(LOOKAHEAD FAILED)
        Call:   vardecl(LOOKING AHEAD...)
          Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"public">
          Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"private">
          Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"protected">
          Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"final">
          Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"int">
          Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <"string">
          Visited token: <<IDENT>: "f" at line 9 column 9>; Expected token: <<IDENT>>
          Visited token: <"=" at line 9 column 11>; Expected token: <<IDENT>>
        Return: vardecl(LOOKAHEAD FAILED)
        Call:   atribstat
          Call:   lvalue
            Consumed token: <<IDENT>: "f" at line 9 column 9>
          Return: lvalue
          Consumed token: <"=" at line 9 column 11>
          Call:   expression
            Call:   notExpression(LOOKING AHEAD...)
              Visited token: <<float_constant>: "12.21" at line 9 column 13>; Expected token: <"!">
            Return: notExpression(LOOKAHEAD FAILED)
            Call:   numcompexpr
              Call:   numexpr
                Call:   term
                  Call:   unaryexpr
                    Call:   factor
                      Consumed token: <<float_constant>: "12.21" at line 9 column 13>
                    Return: factor
                  Return: unaryexpr
                Return: term
              Return: numexpr
            Return: numcompexpr
          Return: expression
        Return: atribstat
        Consumed token: <";" at line 9 column 18>
        Call:   classlist(LOOKING AHEAD...)
          Call:   classdecl(LOOKING AHEAD...)
            Visited token: <"protected" at line 12 column 9>; Expected token: <"public">
            Visited token: <"protected" at line 12 column 9>; Expected token: <"private">
            Visited token: <"protected" at line 12 column 9>; Expected token: <"protected">
            Visited token: <"int" at line 12 column 19>; Expected token: <"class">
          Return: classdecl(LOOKAHEAD FAILED)
        Return: classlist(LOOKAHEAD FAILED)
        Call:   vardecl(LOOKING AHEAD...)
          Visited token: <"protected" at line 12 column 9>; Expected token: <"public">
          Visited token: <"protected" at line 12 column 9>; Expected token: <"private">
          Visited token: <"protected" at line 12 column 9>; Expected token: <"protected">
          Visited token: <"int" at line 12 column 19>; Expected token: <"final">
          Visited token: <"int" at line 12 column 19>; Expected token: <"int">
          Visited token: <<IDENT>: "testeByte" at line 12 column 23>; Expected token: <<IDENT>>
          Visited token: <"(" at line 12 column 32>; Expected token: <"[">
          Visited token: <"(" at line 12 column 32>; Expected token: <",">
        Return: vardecl(LOOKAHEAD SUCCEEDED)
        Visited token: <"(" at line 12 column 32>; Expected token: <";">
        Call:   methoddecl(LOOKING AHEAD...)
          Visited token: <"protected" at line 12 column 9>; Expected token: <"public">
          Visited token: <"protected" at line 12 column 9>; Expected token: <"private">
          Visited token: <"protected" at line 12 column 9>; Expected token: <"protected">
          Visited token: <"int" at line 12 column 19>; Expected token: <"final">
          Visited token: <"int" at line 12 column 19>; Expected token: <"int">
          Visited token: <<IDENT>: "testeByte" at line 12 column 23>; Expected token: <"[">
          Visited token: <<IDENT>: "testeByte" at line 12 column 23>; Expected token: <<IDENT>>
          Call:   methodbody(LOOKING AHEAD...)
            Visited token: <"(" at line 12 column 32>; Expected token: <"(">
            Call:   paramlist(LOOKING AHEAD...)
              Visited token: <")" at line 12 column 33>; Expected token: <"int">
              Visited token: <")" at line 12 column 33>; Expected token: <"string">
              Visited token: <")" at line 12 column 33>; Expected token: <<IDENT>>
              Visited token: <")" at line 12 column 33>; Expected token: <"byte">
              Visited token: <")" at line 12 column 33>; Expected token: <"short">
              Visited token: <")" at line 12 column 33>; Expected token: <"long">
              Visited token: <")" at line 12 column 33>; Expected token: <"float">
            Return: paramlist(LOOKAHEAD SUCCEEDED)
            Visited token: <")" at line 12 column 33>; Expected token: <")">
            Call:   methoddecl
              Consumed token: <"protected" at line 12 column 9>
              Consumed token: <"int" at line 12 column 19>
              Consumed token: <<IDENT>: "testeByte" at line 12 column 23>
              Call:   methodbody
                Consumed token: <"(" at line 12 column 32>
                Call:   paramlist
                Return: paramlist
                Consumed token: <")" at line 12 column 33>
                Call:   statement
                  Visited token: <"{" at line 12 column 35>; Expected token: <<IDENT>>
                  Consumed token: <"{" at line 12 column 35>
                  Call:   statlist
                    Call:   statement
                      Visited token: <"if" at line 14 column 17>; Expected token: <<IDENT>>
                      Call:   ifstat
                        Consumed token: <"if" at line 14 column 17>
                        Consumed token: <"(" at line 14 column 19>
                        Call:   expression
                          Call:   notExpression(LOOKING AHEAD...)
                            Visited token: <<IDENT>: "variavelByte1" at line 14 column 20>; Expected token: <"!">
                          Return: notExpression(LOOKAHEAD FAILED)
                          Call:   numcompexpr
                            Call:   numexpr
                              Call:   term
                                Call:   unaryexpr
                                  Call:   factor
                                    Call:   lvalue
                                      Consumed token: <<IDENT>: "variavelByte1" at line 14 column 20>
                                    Return: lvalue
                                  Return: factor
                                Return: unaryexpr
                              Return: term
                            Return: numexpr
                            Consumed token: <">" at line 14 column 34>
                            Call:   numexpr
                              Call:   term
                                Call:   unaryexpr
                                  Call:   factor
                                    Consumed token: <<int_constant>: "2" at line 14 column 36>
                                  Return: factor
                                Return: unaryexpr
                              Return: term
                            Return: numexpr
                          Return: numcompexpr
                        Return: expression
                        Consumed token: <")" at line 14 column 37>
                        Call:   statement
                          Visited token: <"{" at line 14 column 39>; Expected token: <<IDENT>>
                          Consumed token: <"{" at line 14 column 39>
                          Call:   statlist
                            Call:   statement
                              Visited token: <"print" at line 15 column 25>; Expected token: <<IDENT>>
                              Call:   printstat
                                Consumed token: <"print" at line 15 column 25>
                                Call:   expression
                                  Call:   notExpression(LOOKING AHEAD...)
                                    Visited token: <"(" at line 15 column 30>; Expected token: <"!">
                                  Return: notExpression(LOOKAHEAD FAILED)
                                  Call:   numcompexpr
                                    Call:   numexpr
                                      Call:   term
                                        Call:   unaryexpr
                                          Call:   factor
                                            Consumed token: <"(" at line 15 column 30>
                                            Call:   expression
                                              Call:   notExpression(LOOKING AHEAD...)
                                                Visited token: <<IDENT>: "variavelByte1" at line 15 column 31>; Expected token: <"!">
                                              Return: notExpression(LOOKAHEAD FAILED)
                                              Call:   numcompexpr
                                                Call:   numexpr
                                                  Call:   term
                                                    Call:   unaryexpr
                                                      Call:   factor
                                                        Call:   lvalue
                                                          Consumed token: <<IDENT>: "variavelByte1" at line 15 column 31>
                                                        Return: lvalue
                                                      Return: factor
                                                    Return: unaryexpr
                                                  Return: term
                                                Return: numexpr
                                              Return: numcompexpr
                                            Return: expression
                                            Consumed token: <")" at line 15 column 44>
                                          Return: factor
                                        Return: unaryexpr
                                      Return: term
                                    Return: numexpr
                                  Return: numcompexpr
                                Return: expression
                              Return: printstat
                              Consumed token: <";" at line 15 column 45>
                            Return: statement
                          Return: statlist
                          Consumed token: <"}" at line 16 column 17>
                        Return: statement
                      Return: ifstat
                    Return: statement
                  Return: statlist
                  Consumed token: <"}" at line 17 column 9>
                Return: statement
              Return: methodbody
            Return: methoddecl
            Call:   classlist(LOOKING AHEAD...)
              Call:   classdecl(LOOKING AHEAD...)
                Visited token: <"private" at line 19 column 9>; Expected token: <"public">
                Visited token: <"private" at line 19 column 9>; Expected token: <"private">
                Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <"class">
              Return: classdecl(LOOKAHEAD FAILED)
            Return: classlist(LOOKAHEAD FAILED)
            Call:   vardecl(LOOKING AHEAD...)
              Visited token: <"private" at line 19 column 9>; Expected token: <"public">
              Visited token: <"private" at line 19 column 9>; Expected token: <"private">
              Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <"final">
              Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <"int">
              Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <"string">
              Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <<IDENT>>
              Visited token: <<IDENT>: "testeShort" at line 19 column 24>; Expected token: <<IDENT>>
              Visited token: <"(" at line 19 column 34>; Expected token: <"[">
              Visited token: <"(" at line 19 column 34>; Expected token: <",">
            Return: vardecl(LOOKAHEAD SUCCEEDED)
            Visited token: <"(" at line 19 column 34>; Expected token: <";">
            Call:   methoddecl(LOOKING AHEAD...)
              Visited token: <"private" at line 19 column 9>; Expected token: <"public">
              Visited token: <"private" at line 19 column 9>; Expected token: <"private">
              Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <"final">
              Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <"int">
              Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <"string">
              Visited token: <<IDENT>: "Batata" at line 19 column 17>; Expected token: <<IDENT>>
              Visited token: <<IDENT>: "testeShort" at line 19 column 24>; Expected token: <"[">
              Visited token: <<IDENT>: "testeShort" at line 19 column 24>; Expected token: <<IDENT>>
              Call:   methodbody(LOOKING AHEAD...)
                Visited token: <"(" at line 19 column 34>; Expected token: <"(">
                Call:   paramlist(LOOKING AHEAD...)
                  Visited token: <")" at line 19 column 35>; Expected token: <"int">
                  Visited token: <")" at line 19 column 35>; Expected token: <"string">
                  Visited token: <")" at line 19 column 35>; Expected token: <<IDENT>>
                  Visited token: <")" at line 19 column 35>; Expected token: <"byte">
                  Visited token: <")" at line 19 column 35>; Expected token: <"short">
                  Visited token: <")" at line 19 column 35>; Expected token: <"long">
                  Visited token: <")" at line 19 column 35>; Expected token: <"float">
                Return: paramlist(LOOKAHEAD SUCCEEDED)
                Visited token: <")" at line 19 column 35>; Expected token: <")">
                Call:   methoddecl
                  Consumed token: <"private" at line 19 column 9>
                  Consumed token: <<IDENT>: "Batata" at line 19 column 17>
                  Consumed token: <<IDENT>: "testeShort" at line 19 column 24>
                  Call:   methodbody
                    Consumed token: <"(" at line 19 column 34>
                    Call:   paramlist
                    Return: paramlist
                    Consumed token: <")" at line 19 column 35>
                    Call:   statement
                      Visited token: <"{" at line 19 column 37>; Expected token: <<IDENT>>
                      Consumed token: <"{" at line 19 column 37>
                      Call:   statlist
                        Call:   statement
                          Visited token: <"short" at line 21 column 17>; Expected token: <<IDENT>>
                          Call:   vardecl
                            Consumed token: <"short" at line 21 column 17>
                            Consumed token: <<IDENT>: "variavelShort1" at line 21 column 23>
                          Return: vardecl
                          Consumed token: <";" at line 21 column 37>
                        Return: statement
                        Call:   statlist
                          Call:   statement
                            Visited token: <<IDENT>: "variavelShort1" at line 22 column 17>; Expected token: <<IDENT>>
                            Visited token: <"=" at line 22 column 32>; Expected token: <<IDENT>>
                            Call:   atribstat
                              Call:   lvalue
                                Consumed token: <<IDENT>: "variavelShort1" at line 22 column 17>
                              Return: lvalue
                              Consumed token: <"=" at line 22 column 32>
                              Call:   expression
                                Call:   notExpression(LOOKING AHEAD...)
                                  Visited token: <<int_constant>: "6" at line 22 column 34>; Expected token: <"!">
                                Return: notExpression(LOOKAHEAD FAILED)
                                Call:   numcompexpr
                                  Call:   numexpr
                                    Call:   term
                                      Call:   unaryexpr
                                        Call:   factor
                                          Consumed token: <<int_constant>: "6" at line 22 column 34>
                                        Return: factor
                                      Return: unaryexpr
                                    Return: term
                                  Return: numexpr
                                Return: numcompexpr
                              Return: expression
                            Return: atribstat
                            Consumed token: <";" at line 22 column 35>
                          Return: statement
                          Call:   statlist
                            Call:   statement
                              Visited token: <"if" at line 24 column 25>; Expected token: <<IDENT>>
                              Call:   ifstat
                                Consumed token: <"if" at line 24 column 25>
                                Consumed token: <"(" at line 24 column 27>
                                Call:   expression
                                  Call:   notExpression(LOOKING AHEAD...)
                                    Visited token: <<IDENT>: "variavelShort1" at line 24 column 28>; Expected token: <"!">
                                  Return: notExpression(LOOKAHEAD FAILED)
                                  Call:   numcompexpr
                                    Call:   numexpr
                                      Call:   term
                                        Call:   unaryexpr
                                          Call:   factor
                                            Call:   lvalue
                                              Consumed token: <<IDENT>: "variavelShort1" at line 24 column 28>
                                            Return: lvalue
                                          Return: factor
                                        Return: unaryexpr
                                      Return: term
                                    Return: numexpr
                                    Consumed token: <"==" at line 24 column 43>
                                    Call:   numexpr
                                      Call:   term
                                        Call:   unaryexpr
                                          Call:   factor
                                            Consumed token: <<int_constant>: "6" at line 24 column 46>
                                          Return: factor
                                        Return: unaryexpr
                                      Return: term
                                    Return: numexpr
                                  Return: numcompexpr
                                Return: expression
                                Consumed token: <")" at line 24 column 47>
                                Call:   statement
                                  Visited token: <"{" at line 24 column 49>; Expected token: <<IDENT>>
                                  Consumed token: <"{" at line 24 column 49>
                                  Call:   statlist
                                    Call:   statement
                                      Visited token: <"print" at line 25 column 33>; Expected token: <<IDENT>>
                                      Call:   printstat
                                        Consumed token: <"print" at line 25 column 33>
                                        Call:   expression
                                          Call:   notExpression(LOOKING AHEAD...)
                                            Visited token: <"(" at line 25 column 38>; Expected token: <"!">
                                          Return: notExpression(LOOKAHEAD FAILED)
                                          Call:   numcompexpr
                                            Call:   numexpr
                                              Call:   term
                                                Call:   unaryexpr
                                                  Call:   factor
                                                    Consumed token: <"(" at line 25 column 38>
                                                    Call:   expression
                                                      Call:   notExpression(LOOKING AHEAD...)
                                                        Visited token: <<IDENT>: "variavelShort1" at line 25 column 39>; Expected token: <"!">
                                                      Return: notExpression(LOOKAHEAD FAILED)
                                                      Call:   numcompexpr
                                                        Call:   numexpr
                                                          Call:   term
                                                            Call:   unaryexpr
                                                              Call:   factor
                                                                Call:   lvalue
                                                                  Consumed token: <<IDENT>: "variavelShort1" at line 25 column 39>
                                                                Return: lvalue
                                                              Return: factor
                                                            Return: unaryexpr
                                                          Return: term
                                                        Return: numexpr
                                                      Return: numcompexpr
                                                    Return: expression
                                                    Consumed token: <")" at line 25 column 53>
                                                  Return: factor
                                                Return: unaryexpr
                                              Return: term
                                            Return: numexpr
                                          Return: numcompexpr
                                        Return: expression
                                      Return: printstat
                                      Consumed token: <";" at line 25 column 54>
                                    Return: statement
                                  Return: statlist
                                  Consumed token: <"}" at line 26 column 25>
                                Return: statement
                                Consumed token: <"else" at line 27 column 25>
                                Call:   statement
                                  Visited token: <"{" at line 27 column 30>; Expected token: <<IDENT>>
                                  Consumed token: <"{" at line 27 column 30>
                                  Call:   statlist
                                    Call:   statement
                                      Visited token: <"print" at line 28 column 29>; Expected token: <<IDENT>>
                                      Call:   printstat
                                        Consumed token: <"print" at line 28 column 29>
                                        Call:   expression
                                          Call:   notExpression(LOOKING AHEAD...)
                                            Visited token: <"(" at line 28 column 34>; Expected token: <"!">
                                          Return: notExpression(LOOKAHEAD FAILED)
                                          Call:   numcompexpr
                                            Call:   numexpr
                                              Call:   term
                                                Call:   unaryexpr
                                                  Call:   factor
                                                    Consumed token: <"(" at line 28 column 34>
                                                    Call:   expression
                                                      Call:   notExpression(LOOKING AHEAD...)
                                                        Visited token: <<IDENT>: "variavelShort1" at line 28 column 35>; Expected token: <"!">
                                                      Return: notExpression(LOOKAHEAD FAILED)
                                                      Call:   numcompexpr
                                                        Call:   numexpr
                                                          Call:   term
                                                            Call:   unaryexpr
                                                              Call:   factor
                                                                Call:   lvalue
                                                                  Consumed token: <<IDENT>: "variavelShort1" at line 28 column 35>
                                                                Return: lvalue
                                                              Return: factor
                                                            Return: unaryexpr
                                                          Return: term
                                                        Return: numexpr
                                                        Consumed token: <">" at line 28 column 49>
                                                        Call:   numexpr
                                                          Call:   term
                                                            Call:   unaryexpr
                                                              Call:   factor
                                                                Consumed token: <"(" at line 28 column 50>
                                                                Call:   expression
                                                                  Call:   notExpression(LOOKING AHEAD...)
                                                                    Visited token: <<int_constant>: "6" at line 28 column 51>; Expected token: <"!">
                                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                                  Call:   numcompexpr
                                                                    Call:   numexpr
                                                                      Call:   term
                                                                        Call:   unaryexpr
                                                                          Call:   factor
                                                                            Consumed token: <<int_constant>: "6" at line 28 column 51>
                                                                          Return: factor
                                                                        Return: unaryexpr
                                                                        Consumed token: <"%" at line 28 column 52>
                                                                        Call:   unaryexpr
                                                                          Call:   factor
                                                                            Consumed token: <<int_constant>: "1" at line 28 column 53>
                                                                          Return: factor
                                                                        Return: unaryexpr
                                                                      Return: term
                                                                    Return: numexpr
                                                                  Return: numcompexpr
                                                                Return: expression
                                                                Consumed token: <")" at line 28 column 54>
                                                              Return: factor
                                                            Return: unaryexpr
                                                          Return: term
                                                        Return: numexpr
                                                      Return: numcompexpr
                                                    Return: expression
                                                    Consumed token: <")" at line 28 column 55>
                                                  Return: factor
                                                Return: unaryexpr
                                              Return: term
                                            Return: numexpr
                                          Return: numcompexpr
                                        Return: expression
                                      Return: printstat
                                      Consumed token: <";" at line 28 column 56>
                                    Return: statement
                                  Return: statlist
                                  Consumed token: <"}" at line 29 column 13>
                                Return: statement
                              Return: ifstat
                            Return: statement
                          Return: statlist
                        Return: statlist
                      Return: statlist
                      Consumed token: <"}" at line 30 column 9>
                    Return: statement
                  Return: methodbody
                Return: methoddecl
                Call:   classlist(LOOKING AHEAD...)
                  Call:   classdecl(LOOKING AHEAD...)
                    Visited token: <"final" at line 32 column 9>; Expected token: <"public">
                    Visited token: <"final" at line 32 column 9>; Expected token: <"private">
                    Visited token: <"final" at line 32 column 9>; Expected token: <"protected">
                    Visited token: <"final" at line 32 column 9>; Expected token: <"class">
                  Return: classdecl(LOOKAHEAD FAILED)
                Return: classlist(LOOKAHEAD FAILED)
                Call:   vardecl(LOOKING AHEAD...)
                  Visited token: <"final" at line 32 column 9>; Expected token: <"public">
                  Visited token: <"final" at line 32 column 9>; Expected token: <"private">
                  Visited token: <"final" at line 32 column 9>; Expected token: <"protected">
                  Visited token: <"final" at line 32 column 9>; Expected token: <"final">
                  Visited token: <<IDENT>: "Repolho" at line 32 column 15>; Expected token: <"int">
                  Visited token: <<IDENT>: "Repolho" at line 32 column 15>; Expected token: <"string">
                  Visited token: <<IDENT>: "Repolho" at line 32 column 15>; Expected token: <<IDENT>>
                  Visited token: <<IDENT>: "testeLong" at line 32 column 23>; Expected token: <<IDENT>>
                  Visited token: <"(" at line 32 column 32>; Expected token: <"[">
                  Visited token: <"(" at line 32 column 32>; Expected token: <",">
                Return: vardecl(LOOKAHEAD SUCCEEDED)
                Visited token: <"(" at line 32 column 32>; Expected token: <";">
                Call:   methoddecl(LOOKING AHEAD...)
                  Visited token: <"final" at line 32 column 9>; Expected token: <"public">
                  Visited token: <"final" at line 32 column 9>; Expected token: <"private">
                  Visited token: <"final" at line 32 column 9>; Expected token: <"protected">
                  Visited token: <"final" at line 32 column 9>; Expected token: <"final">
                  Visited token: <<IDENT>: "Repolho" at line 32 column 15>; Expected token: <"int">
                  Visited token: <<IDENT>: "Repolho" at line 32 column 15>; Expected token: <"string">
                  Visited token: <<IDENT>: "Repolho" at line 32 column 15>; Expected token: <<IDENT>>
                  Visited token: <<IDENT>: "testeLong" at line 32 column 23>; Expected token: <"[">
                  Visited token: <<IDENT>: "testeLong" at line 32 column 23>; Expected token: <<IDENT>>
                  Call:   methodbody(LOOKING AHEAD...)
                    Visited token: <"(" at line 32 column 32>; Expected token: <"(">
                    Call:   paramlist(LOOKING AHEAD...)
                      Visited token: <")" at line 32 column 33>; Expected token: <"int">
                      Visited token: <")" at line 32 column 33>; Expected token: <"string">
                      Visited token: <")" at line 32 column 33>; Expected token: <<IDENT>>
                      Visited token: <")" at line 32 column 33>; Expected token: <"byte">
                      Visited token: <")" at line 32 column 33>; Expected token: <"short">
                      Visited token: <")" at line 32 column 33>; Expected token: <"long">
                      Visited token: <")" at line 32 column 33>; Expected token: <"float">
                    Return: paramlist(LOOKAHEAD SUCCEEDED)
                    Visited token: <")" at line 32 column 33>; Expected token: <")">
                    Call:   methoddecl
                      Consumed token: <"final" at line 32 column 9>
                      Consumed token: <<IDENT>: "Repolho" at line 32 column 15>
                      Consumed token: <<IDENT>: "testeLong" at line 32 column 23>
                      Call:   methodbody
                        Consumed token: <"(" at line 32 column 32>
                        Call:   paramlist
                        Return: paramlist
                        Consumed token: <")" at line 32 column 33>
                        Call:   statement
                          Visited token: <"{" at line 32 column 35>; Expected token: <<IDENT>>
                          Consumed token: <"{" at line 32 column 35>
                          Call:   statlist
                            Call:   statement
                              Visited token: <"long" at line 34 column 17>; Expected token: <<IDENT>>
                              Call:   vardecl
                                Consumed token: <"long" at line 34 column 17>
                                Consumed token: <<IDENT>: "variavelLong1" at line 34 column 22>
                              Return: vardecl
                              Consumed token: <";" at line 34 column 35>
                            Return: statement
                            Call:   statlist
                              Call:   statement
                                Visited token: <"if" at line 36 column 17>; Expected token: <<IDENT>>
                                Call:   ifstat
                                  Consumed token: <"if" at line 36 column 17>
                                  Consumed token: <"(" at line 36 column 20>
                                  Call:   expression
                                    Call:   notExpression(LOOKING AHEAD...)
                                      Visited token: <<IDENT>: "variavelLong1" at line 36 column 21>; Expected token: <"!">
                                    Return: notExpression(LOOKAHEAD FAILED)
                                    Call:   numcompexpr
                                      Call:   numexpr
                                        Call:   term
                                          Call:   unaryexpr
                                            Call:   factor
                                              Call:   lvalue
                                                Consumed token: <<IDENT>: "variavelLong1" at line 36 column 21>
                                              Return: lvalue
                                            Return: factor
                                          Return: unaryexpr
                                        Return: term
                                      Return: numexpr
                                      Consumed token: <"!=" at line 36 column 35>
                                      Call:   numexpr
                                        Call:   term
                                          Call:   unaryexpr
                                            Call:   factor
                                              Consumed token: <<long_constant>: "18837891L" at line 36 column 38>
                                            Return: factor
                                          Return: unaryexpr
                                        Return: term
                                      Return: numexpr
                                    Return: numcompexpr
                                  Return: expression
                                  Consumed token: <")" at line 36 column 47>
                                  Call:   statement
                                    Visited token: <"{" at line 37 column 17>; Expected token: <<IDENT>>
                                    Consumed token: <"{" at line 37 column 17>
                                    Call:   statlist
                                      Call:   statement
                                        Visited token: <"print" at line 38 column 25>; Expected token: <<IDENT>>
                                        Call:   printstat
                                          Consumed token: <"print" at line 38 column 25>
                                          Call:   expression
                                            Call:   notExpression(LOOKING AHEAD...)
                                              Visited token: <"(" at line 38 column 30>; Expected token: <"!">
                                            Return: notExpression(LOOKAHEAD FAILED)
                                            Call:   numcompexpr
                                              Call:   numexpr
                                                Call:   term
                                                  Call:   unaryexpr
                                                    Call:   factor
                                                      Consumed token: <"(" at line 38 column 30>
                                                      Call:   expression
                                                        Call:   notExpression(LOOKING AHEAD...)
                                                          Visited token: <<IDENT>: "variavelLong1" at line 38 column 31>; Expected token: <"!">
                                                        Return: notExpression(LOOKAHEAD FAILED)
                                                        Call:   numcompexpr
                                                          Call:   numexpr
                                                            Call:   term
                                                              Call:   unaryexpr
                                                                Call:   factor
                                                                  Call:   lvalue
                                                                    Consumed token: <<IDENT>: "variavelLong1" at line 38 column 31>
                                                                  Return: lvalue
                                                                Return: factor
                                                              Return: unaryexpr
                                                            Return: term
                                                          Return: numexpr
                                                        Return: numcompexpr
                                                      Return: expression
                                                      Consumed token: <")" at line 38 column 44>
                                                    Return: factor
                                                  Return: unaryexpr
                                                Return: term
                                              Return: numexpr
                                            Return: numcompexpr
                                          Return: expression
                                        Return: printstat
                                        Consumed token: <";" at line 38 column 45>
                                      Return: statement
                                    Return: statlist
                                    Consumed token: <"}" at line 39 column 17>
                                  Return: statement
                                Return: ifstat
                              Return: statement
                            Return: statlist
                          Return: statlist
                          Consumed token: <"}" at line 40 column 9>
                        Return: statement
                      Return: methodbody
                    Return: methoddecl
                    Call:   classlist(LOOKING AHEAD...)
                      Call:   classdecl(LOOKING AHEAD...)
                        Visited token: <"public" at line 42 column 9>; Expected token: <"public">
                        Visited token: <"string" at line 42 column 16>; Expected token: <"class">
                      Return: classdecl(LOOKAHEAD FAILED)
                    Return: classlist(LOOKAHEAD FAILED)
                    Call:   vardecl(LOOKING AHEAD...)
                      Visited token: <"public" at line 42 column 9>; Expected token: <"public">
                      Visited token: <"string" at line 42 column 16>; Expected token: <"final">
                      Visited token: <"string" at line 42 column 16>; Expected token: <"int">
                      Visited token: <"string" at line 42 column 16>; Expected token: <"string">
                      Visited token: <<IDENT>: "testeFloat" at line 42 column 23>; Expected token: <<IDENT>>
                      Visited token: <"(" at line 42 column 33>; Expected token: <"[">
                      Visited token: <"(" at line 42 column 33>; Expected token: <",">
                    Return: vardecl(LOOKAHEAD SUCCEEDED)
                    Visited token: <"(" at line 42 column 33>; Expected token: <";">
                    Call:   methoddecl(LOOKING AHEAD...)
                      Visited token: <"public" at line 42 column 9>; Expected token: <"public">
                      Visited token: <"string" at line 42 column 16>; Expected token: <"final">
                      Visited token: <"string" at line 42 column 16>; Expected token: <"int">
                      Visited token: <"string" at line 42 column 16>; Expected token: <"string">
                      Visited token: <<IDENT>: "testeFloat" at line 42 column 23>; Expected token: <"[">
                      Visited token: <<IDENT>: "testeFloat" at line 42 column 23>; Expected token: <<IDENT>>
                      Call:   methodbody(LOOKING AHEAD...)
                        Visited token: <"(" at line 42 column 33>; Expected token: <"(">
                        Call:   paramlist(LOOKING AHEAD...)
                          Visited token: <")" at line 42 column 34>; Expected token: <"int">
                          Visited token: <")" at line 42 column 34>; Expected token: <"string">
                          Visited token: <")" at line 42 column 34>; Expected token: <<IDENT>>
                          Visited token: <")" at line 42 column 34>; Expected token: <"byte">
                          Visited token: <")" at line 42 column 34>; Expected token: <"short">
                          Visited token: <")" at line 42 column 34>; Expected token: <"long">
                          Visited token: <")" at line 42 column 34>; Expected token: <"float">
                        Return: paramlist(LOOKAHEAD SUCCEEDED)
                        Visited token: <")" at line 42 column 34>; Expected token: <")">
                        Call:   methoddecl
                          Consumed token: <"public" at line 42 column 9>
                          Consumed token: <"string" at line 42 column 16>
                          Consumed token: <<IDENT>: "testeFloat" at line 42 column 23>
                          Call:   methodbody
                            Consumed token: <"(" at line 42 column 33>
                            Call:   paramlist
                            Return: paramlist
                            Consumed token: <")" at line 42 column 34>
                            Call:   statement
                              Visited token: <"{" at line 42 column 36>; Expected token: <<IDENT>>
                              Consumed token: <"{" at line 42 column 36>
                              Call:   statlist
                                Call:   statement
                                  Visited token: <"float" at line 44 column 17>; Expected token: <<IDENT>>
                                  Call:   vardecl
                                    Consumed token: <"float" at line 44 column 17>
                                    Consumed token: <<IDENT>: "variavelFloat1" at line 44 column 23>
                                  Return: vardecl
                                  Consumed token: <";" at line 44 column 37>
                                Return: statement
                                Call:   statlist
                                  Call:   statement
                                    Visited token: <<IDENT>: "variavelFloat1" at line 45 column 17>; Expected token: <<IDENT>>
                                    Visited token: <"=" at line 45 column 32>; Expected token: <<IDENT>>
                                    Call:   atribstat
                                      Call:   lvalue
                                        Consumed token: <<IDENT>: "variavelFloat1" at line 45 column 17>
                                      Return: lvalue
                                      Consumed token: <"=" at line 45 column 32>
                                      Call:   expression
                                        Call:   notExpression(LOOKING AHEAD...)
                                          Visited token: <<float_constant>: "11.83" at line 45 column 34>; Expected token: <"!">
                                        Return: notExpression(LOOKAHEAD FAILED)
                                        Call:   numcompexpr
                                          Call:   numexpr
                                            Call:   term
                                              Call:   unaryexpr
                                                Call:   factor
                                                  Consumed token: <<float_constant>: "11.83" at line 45 column 34>
                                                Return: factor
                                              Return: unaryexpr
                                            Return: term
                                          Return: numexpr
                                        Return: numcompexpr
                                      Return: expression
                                    Return: atribstat
                                    Consumed token: <";" at line 45 column 39>
                                  Return: statement
                                  Call:   statlist
                                    Call:   statement
                                      Visited token: <"if" at line 47 column 25>; Expected token: <<IDENT>>
                                      Call:   ifstat
                                        Consumed token: <"if" at line 47 column 25>
                                        Consumed token: <"(" at line 47 column 27>
                                        Call:   expression
                                          Call:   notExpression(LOOKING AHEAD...)
                                            Visited token: <<IDENT>: "variavelFloat1" at line 47 column 28>; Expected token: <"!">
                                          Return: notExpression(LOOKAHEAD FAILED)
                                          Call:   numcompexpr
                                            Call:   numexpr
                                              Call:   term
                                                Call:   unaryexpr
                                                  Call:   factor
                                                    Call:   lvalue
                                                      Consumed token: <<IDENT>: "variavelFloat1" at line 47 column 28>
                                                    Return: lvalue
                                                  Return: factor
                                                Return: unaryexpr
                                              Return: term
                                            Return: numexpr
                                            Consumed token: <"<" at line 47 column 43>
                                            Call:   numexpr
                                              Call:   term
                                                Call:   unaryexpr
                                                  Call:   factor
                                                    Consumed token: <<float_constant>: "18.88" at line 47 column 45>
                                                  Return: factor
                                                Return: unaryexpr
                                              Return: term
                                            Return: numexpr
                                          Return: numcompexpr
                                        Return: expression
                                        Consumed token: <")" at line 47 column 51>
                                        Call:   statement
                                          Visited token: <"{" at line 47 column 53>; Expected token: <<IDENT>>
                                          Consumed token: <"{" at line 47 column 53>
                                          Call:   statlist
                                            Call:   statement
                                              Visited token: <"print" at line 48 column 33>; Expected token: <<IDENT>>
                                              Call:   printstat
                                                Consumed token: <"print" at line 48 column 33>
                                                Call:   expression
                                                  Call:   notExpression(LOOKING AHEAD...)
                                                    Visited token: <"(" at line 48 column 38>; Expected token: <"!">
                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                  Call:   numcompexpr
                                                    Call:   numexpr
                                                      Call:   term
                                                        Call:   unaryexpr
                                                          Call:   factor
                                                            Consumed token: <"(" at line 48 column 38>
                                                            Call:   expression
                                                              Call:   notExpression(LOOKING AHEAD...)
                                                                Visited token: <<IDENT>: "variavelFloat1" at line 48 column 39>; Expected token: <"!">
                                                              Return: notExpression(LOOKAHEAD FAILED)
                                                              Call:   numcompexpr
                                                                Call:   numexpr
                                                                  Call:   term
                                                                    Call:   unaryexpr
                                                                      Call:   factor
                                                                        Call:   lvalue
                                                                          Consumed token: <<IDENT>: "variavelFloat1" at line 48 column 39>
                                                                        Return: lvalue
                                                                      Return: factor
                                                                    Return: unaryexpr
                                                                  Return: term
                                                                Return: numexpr
                                                              Return: numcompexpr
                                                            Return: expression
                                                            Consumed token: <")" at line 48 column 53>
                                                          Return: factor
                                                        Return: unaryexpr
                                                      Return: term
                                                    Return: numexpr
                                                  Return: numcompexpr
                                                Return: expression
                                              Return: printstat
                                              Consumed token: <";" at line 48 column 54>
                                            Return: statement
                                          Return: statlist
                                          Consumed token: <"}" at line 49 column 25>
                                        Return: statement
                                      Return: ifstat
                                    Return: statement
                                  Return: statlist
                                Return: statlist
                              Return: statlist
                              Consumed token: <"}" at line 50 column 9>
                            Return: statement
                          Return: methodbody
                        Return: methoddecl
                        Call:   classlist(LOOKING AHEAD...)
                          Call:   classdecl(LOOKING AHEAD...)
                            Visited token: <"public" at line 52 column 9>; Expected token: <"public">
                            Visited token: <"final" at line 52 column 16>; Expected token: <"class">
                          Return: classdecl(LOOKAHEAD FAILED)
                        Return: classlist(LOOKAHEAD FAILED)
                        Call:   vardecl(LOOKING AHEAD...)
                          Visited token: <"public" at line 52 column 9>; Expected token: <"public">
                          Visited token: <"final" at line 52 column 16>; Expected token: <"final">
                          Visited token: <"int" at line 52 column 22>; Expected token: <"int">
                          Visited token: <<IDENT>: "testeOperadoresLogicos" at line 52 column 26>; Expected token: <<IDENT>>
                          Visited token: <"(" at line 52 column 48>; Expected token: <"[">
                          Visited token: <"(" at line 52 column 48>; Expected token: <",">
                        Return: vardecl(LOOKAHEAD SUCCEEDED)
                        Visited token: <"(" at line 52 column 48>; Expected token: <";">
                        Call:   methoddecl(LOOKING AHEAD...)
                          Visited token: <"public" at line 52 column 9>; Expected token: <"public">
                          Visited token: <"final" at line 52 column 16>; Expected token: <"final">
                          Visited token: <"int" at line 52 column 22>; Expected token: <"int">
                          Visited token: <<IDENT>: "testeOperadoresLogicos" at line 52 column 26>; Expected token: <"[">
                          Visited token: <<IDENT>: "testeOperadoresLogicos" at line 52 column 26>; Expected token: <<IDENT>>
                          Call:   methodbody(LOOKING AHEAD...)
                            Visited token: <"(" at line 52 column 48>; Expected token: <"(">
                            Call:   methoddecl
                              Consumed token: <"public" at line 52 column 9>
                              Consumed token: <"final" at line 52 column 16>
                              Consumed token: <"int" at line 52 column 22>
                              Consumed token: <<IDENT>: "testeOperadoresLogicos" at line 52 column 26>
                              Call:   methodbody
                                Consumed token: <"(" at line 52 column 48>
                                Call:   paramlist
                                Return: paramlist
                                Consumed token: <")" at line 52 column 49>
                                Call:   statement
                                  Visited token: <"{" at line 52 column 51>; Expected token: <<IDENT>>
                                  Consumed token: <"{" at line 52 column 51>
                                  Call:   statlist
                                    Call:   statement
                                      Visited token: <<IDENT>: "boolean" at line 54 column 15>; Expected token: <<IDENT>>
                                      Visited token: <<IDENT>: "a" at line 54 column 23>; Expected token: <<IDENT>>
                                      Call:   vardecl
                                        Consumed token: <<IDENT>: "boolean" at line 54 column 15>
                                        Consumed token: <<IDENT>: "a" at line 54 column 23>
                                      Return: vardecl
                                      Consumed token: <";" at line 54 column 24>
                                    Return: statement
                                    Call:   statlist
                                      Call:   statement
                                        Visited token: <<IDENT>: "a" at line 55 column 15>; Expected token: <<IDENT>>
                                        Visited token: <"=" at line 55 column 17>; Expected token: <<IDENT>>
                                        Call:   atribstat
                                          Call:   lvalue
                                            Consumed token: <<IDENT>: "a" at line 55 column 15>
                                          Return: lvalue
                                          Consumed token: <"=" at line 55 column 17>
                                          Call:   expression
                                            Call:   notExpression(LOOKING AHEAD...)
                                              Visited token: <<IDENT>: "true" at line 55 column 19>; Expected token: <"!">
                                            Return: notExpression(LOOKAHEAD FAILED)
                                            Call:   numcompexpr
                                              Call:   numexpr
                                                Call:   term
                                                  Call:   unaryexpr
                                                    Call:   factor
                                                      Call:   lvalue
                                                        Consumed token: <<IDENT>: "true" at line 55 column 19>
                                                      Return: lvalue
                                                    Return: factor
                                                  Return: unaryexpr
                                                Return: term
                                              Return: numexpr
                                            Return: numcompexpr
                                          Return: expression
                                        Return: atribstat
                                        Consumed token: <";" at line 55 column 23>
                                      Return: statement
                                      Call:   statlist
                                        Call:   statement
                                          Visited token: <<IDENT>: "boolean" at line 56 column 15>; Expected token: <<IDENT>>
                                          Visited token: <<IDENT>: "b" at line 56 column 23>; Expected token: <<IDENT>>
                                          Call:   vardecl
                                            Consumed token: <<IDENT>: "boolean" at line 56 column 15>
                                            Consumed token: <<IDENT>: "b" at line 56 column 23>
                                          Return: vardecl
                                          Consumed token: <";" at line 56 column 24>
                                        Return: statement
                                        Call:   statlist
                                          Call:   statement
                                            Visited token: <<IDENT>: "b" at line 57 column 15>; Expected token: <<IDENT>>
                                            Visited token: <"=" at line 57 column 17>; Expected token: <<IDENT>>
                                            Call:   atribstat
                                              Call:   lvalue
                                                Consumed token: <<IDENT>: "b" at line 57 column 15>
                                              Return: lvalue
                                              Consumed token: <"=" at line 57 column 17>
                                              Call:   expression
                                                Call:   notExpression(LOOKING AHEAD...)
                                                  Visited token: <<IDENT>: "false" at line 57 column 19>; Expected token: <"!">
                                                Return: notExpression(LOOKAHEAD FAILED)
                                                Call:   numcompexpr
                                                  Call:   numexpr
                                                    Call:   term
                                                      Call:   unaryexpr
                                                        Call:   factor
                                                          Call:   lvalue
                                                            Consumed token: <<IDENT>: "false" at line 57 column 19>
                                                          Return: lvalue
                                                        Return: factor
                                                      Return: unaryexpr
                                                    Return: term
                                                  Return: numexpr
                                                Return: numcompexpr
                                              Return: expression
                                            Return: atribstat
                                            Consumed token: <";" at line 57 column 24>
                                          Return: statement
                                          Call:   statlist
                                            Call:   statement
                                              Visited token: <"print" at line 59 column 15>; Expected token: <<IDENT>>
                                              Call:   printstat
                                                Consumed token: <"print" at line 59 column 15>
                                                Call:   expression
                                                  Call:   notExpression(LOOKING AHEAD...)
                                                    Visited token: <"(" at line 59 column 20>; Expected token: <"!">
                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                  Call:   numcompexpr
                                                    Call:   numexpr
                                                      Call:   term
                                                        Call:   unaryexpr
                                                          Call:   factor
                                                            Consumed token: <"(" at line 59 column 20>
                                                            Call:   expression
                                                              Call:   notExpression(LOOKING AHEAD...)
                                                                Visited token: <<IDENT>: "a" at line 59 column 21>; Expected token: <"!">
                                                              Return: notExpression(LOOKAHEAD FAILED)
                                                              Call:   numcompexpr
                                                                Call:   numexpr
                                                                  Call:   term
                                                                    Call:   unaryexpr
                                                                      Call:   factor
                                                                        Call:   lvalue
                                                                          Consumed token: <<IDENT>: "a" at line 59 column 21>
                                                                        Return: lvalue
                                                                      Return: factor
                                                                    Return: unaryexpr
                                                                  Return: term
                                                                Return: numexpr
                                                              Return: numcompexpr
                                                              Consumed token: <"&&" at line 59 column 22>
                                                              Call:   expression
                                                                Call:   notExpression(LOOKING AHEAD...)
                                                                  Visited token: <<IDENT>: "b" at line 59 column 24>; Expected token: <"!">
                                                                Return: notExpression(LOOKAHEAD FAILED)
                                                                Call:   numcompexpr
                                                                  Call:   numexpr
                                                                    Call:   term
                                                                      Call:   unaryexpr
                                                                        Call:   factor
                                                                          Call:   lvalue
                                                                            Consumed token: <<IDENT>: "b" at line 59 column 24>
                                                                          Return: lvalue
                                                                        Return: factor
                                                                      Return: unaryexpr
                                                                    Return: term
                                                                  Return: numexpr
                                                                Return: numcompexpr
                                                              Return: expression
                                                            Return: expression
                                                            Consumed token: <")" at line 59 column 25>
                                                          Return: factor
                                                        Return: unaryexpr
                                                      Return: term
                                                    Return: numexpr
                                                  Return: numcompexpr
                                                Return: expression
                                              Return: printstat
                                              Consumed token: <";" at line 59 column 26>
                                            Return: statement
                                            Call:   statlist
                                              Call:   statement
                                                Visited token: <"print" at line 60 column 15>; Expected token: <<IDENT>>
                                                Call:   printstat
                                                  Consumed token: <"print" at line 60 column 15>
                                                  Call:   expression
                                                    Call:   notExpression(LOOKING AHEAD...)
                                                      Visited token: <"(" at line 60 column 20>; Expected token: <"!">
                                                    Return: notExpression(LOOKAHEAD FAILED)
                                                    Call:   numcompexpr
                                                      Call:   numexpr
                                                        Call:   term
                                                          Call:   unaryexpr
                                                            Call:   factor
                                                              Consumed token: <"(" at line 60 column 20>
                                                              Call:   expression
                                                                Call:   notExpression(LOOKING AHEAD...)
                                                                  Visited token: <<IDENT>: "a" at line 60 column 21>; Expected token: <"!">
                                                                Return: notExpression(LOOKAHEAD FAILED)
                                                                Call:   numcompexpr
                                                                  Call:   numexpr
                                                                    Call:   term
                                                                      Call:   unaryexpr
                                                                        Call:   factor
                                                                          Call:   lvalue
                                                                            Consumed token: <<IDENT>: "a" at line 60 column 21>
                                                                          Return: lvalue
                                                                        Return: factor
                                                                      Return: unaryexpr
                                                                    Return: term
                                                                  Return: numexpr
                                                                Return: numcompexpr
                                                                Consumed token: <"||" at line 60 column 22>
                                                                Call:   expression
                                                                  Call:   notExpression(LOOKING AHEAD...)
                                                                    Visited token: <<IDENT>: "b" at line 60 column 24>; Expected token: <"!">
                                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                                  Call:   numcompexpr
                                                                    Call:   numexpr
                                                                      Call:   term
                                                                        Call:   unaryexpr
                                                                          Call:   factor
                                                                            Call:   lvalue
                                                                              Consumed token: <<IDENT>: "b" at line 60 column 24>
                                                                            Return: lvalue
                                                                          Return: factor
                                                                        Return: unaryexpr
                                                                      Return: term
                                                                    Return: numexpr
                                                                  Return: numcompexpr
                                                                Return: expression
                                                              Return: expression
                                                              Consumed token: <")" at line 60 column 25>
                                                            Return: factor
                                                          Return: unaryexpr
                                                        Return: term
                                                      Return: numexpr
                                                    Return: numcompexpr
                                                  Return: expression
                                                Return: printstat
                                                Consumed token: <";" at line 60 column 26>
                                              Return: statement
                                              Call:   statlist
                                                Call:   statement
                                                  Visited token: <"print" at line 61 column 15>; Expected token: <<IDENT>>
                                                  Call:   printstat
                                                    Consumed token: <"print" at line 61 column 15>
                                                    Call:   expression
                                                      Call:   notExpression(LOOKING AHEAD...)
                                                        Visited token: <"(" at line 61 column 20>; Expected token: <"!">
                                                      Return: notExpression(LOOKAHEAD FAILED)
                                                      Call:   numcompexpr
                                                        Call:   numexpr
                                                          Call:   term
                                                            Call:   unaryexpr
                                                              Call:   factor
                                                                Consumed token: <"(" at line 61 column 20>
                                                                Call:   expression
                                                                  Call:   notExpression(LOOKING AHEAD...)
                                                                    Visited token: <"!" at line 61 column 21>; Expected token: <"!">
                                                                    Call:   expression(LOOKING AHEAD...)
                                                                      Call:   notExpression(LOOKING AHEAD...)
                                                                        Visited token: <"(" at line 61 column 22>; Expected token: <"!">
                                                                      Return: notExpression(LOOKAHEAD FAILED)
                                                                      Call:   numcompexpr(LOOKING AHEAD...)
                                                                        Call:   numexpr(LOOKING AHEAD...)
                                                                          Call:   term(LOOKING AHEAD...)
                                                                            Call:   unaryexpr(LOOKING AHEAD...)
                                                                              Visited token: <"(" at line 61 column 22>; Expected token: <"+">
                                                                              Visited token: <"(" at line 61 column 22>; Expected token: <"-">
                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                Visited token: <"(" at line 61 column 22>; Expected token: <<int_constant>>
                                                                                Visited token: <"(" at line 61 column 22>; Expected token: <<string_constant>>
                                                                                Visited token: <"(" at line 61 column 22>; Expected token: <<float_constant>>
                                                                                Visited token: <"(" at line 61 column 22>; Expected token: <<byte_constant>>
                                                                                Visited token: <"(" at line 61 column 22>; Expected token: <<long_constant>>
                                                                                Visited token: <"(" at line 61 column 22>; Expected token: <<short_constant>>
                                                                                Visited token: <"(" at line 61 column 22>; Expected token: <"null">
                                                                                Call:   lvalue(LOOKING AHEAD...)
                                                                                  Visited token: <"(" at line 61 column 22>; Expected token: <<IDENT>>
                                                                                Return: lvalue(LOOKAHEAD FAILED)
                                                                                Visited token: <"(" at line 61 column 22>; Expected token: <"(">
                                                                                Call:   expression(LOOKING AHEAD...)
                                                                                  Call:   notExpression(LOOKING AHEAD...)
                                                                                    Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <"!">
                                                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                                                  Call:   numcompexpr(LOOKING AHEAD...)
                                                                                    Call:   numexpr(LOOKING AHEAD...)
                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                        Call:   unaryexpr(LOOKING AHEAD...)
                                                                                          Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <"+">
                                                                                          Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <"-">
                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                            Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <<int_constant>>
                                                                                            Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <<string_constant>>
                                                                                            Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <<float_constant>>
                                                                                            Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <<byte_constant>>
                                                                                            Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <<long_constant>>
                                                                                            Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <<short_constant>>
                                                                                            Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <"null">
                                                                                            Call:   lvalue(LOOKING AHEAD...)
                                                                                              Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <<IDENT>>
                                                                                              Call:   notExpression
                                                                                                Consumed token: <"!" at line 61 column 21>
                                                                                                Call:   expression
                                                                                                  Call:   notExpression(LOOKING AHEAD...)
                                                                                                    Visited token: <"(" at line 61 column 22>; Expected token: <"!">
                                                                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                                                                  Call:   numcompexpr
                                                                                                    Call:   numexpr
                                                                                                      Call:   term
                                                                                                        Call:   unaryexpr
                                                                                                          Call:   factor
                                                                                                            Consumed token: <"(" at line 61 column 22>
                                                                                                            Call:   expression
                                                                                                              Call:   notExpression(LOOKING AHEAD...)
                                                                                                                Visited token: <<IDENT>: "a" at line 61 column 23>; Expected token: <"!">
                                                                                                              Return: notExpression(LOOKAHEAD FAILED)
                                                                                                              Call:   numcompexpr
                                                                                                                Call:   numexpr
                                                                                                                  Call:   term
                                                                                                                    Call:   unaryexpr
                                                                                                                      Call:   factor
                                                                                                                        Call:   lvalue
                                                                                                                          Consumed token: <<IDENT>: "a" at line 61 column 23>
                                                                                                                        Return: lvalue
                                                                                                                      Return: factor
                                                                                                                    Return: unaryexpr
                                                                                                                  Return: term
                                                                                                                Return: numexpr
                                                                                                              Return: numcompexpr
                                                                                                              Consumed token: <"&&" at line 61 column 24>
                                                                                                              Call:   expression
                                                                                                                Call:   notExpression(LOOKING AHEAD...)
                                                                                                                  Visited token: <<IDENT>: "b" at line 61 column 26>; Expected token: <"!">
                                                                                                                Return: notExpression(LOOKAHEAD FAILED)
                                                                                                                Call:   numcompexpr
                                                                                                                  Call:   numexpr
                                                                                                                    Call:   term
                                                                                                                      Call:   unaryexpr
                                                                                                                        Call:   factor
                                                                                                                          Call:   lvalue
                                                                                                                            Consumed token: <<IDENT>: "b" at line 61 column 26>
                                                                                                                          Return: lvalue
                                                                                                                        Return: factor
                                                                                                                      Return: unaryexpr
                                                                                                                    Return: term
                                                                                                                  Return: numexpr
                                                                                                                Return: numcompexpr
                                                                                                              Return: expression
                                                                                                            Return: expression
                                                                                                            Consumed token: <")" at line 61 column 27>
                                                                                                          Return: factor
                                                                                                        Return: unaryexpr
                                                                                                      Return: term
                                                                                                    Return: numexpr
                                                                                                  Return: numcompexpr
                                                                                                Return: expression
                                                                                              Return: notExpression
                                                                                            Return: expression
                                                                                            Consumed token: <")" at line 61 column 28>
                                                                                          Return: factor
                                                                                        Return: unaryexpr
                                                                                      Return: term
                                                                                    Return: numexpr
                                                                                  Return: numcompexpr
                                                                                Return: expression
                                                                              Return: printstat
                                                                              Consumed token: <";" at line 61 column 29>
                                                                            Return: statement
                                                                            Call:   statlist
                                                                              Call:   statement
                                                                                Visited token: <"print" at line 62 column 15>; Expected token: <<IDENT>>
                                                                                Call:   printstat
                                                                                  Consumed token: <"print" at line 62 column 15>
                                                                                  Call:   expression
                                                                                    Call:   notExpression(LOOKING AHEAD...)
                                                                                      Visited token: <"(" at line 62 column 20>; Expected token: <"!">
                                                                                    Return: notExpression(LOOKAHEAD FAILED)
                                                                                    Call:   numcompexpr
                                                                                      Call:   numexpr
                                                                                        Call:   term
                                                                                          Call:   unaryexpr
                                                                                            Call:   factor
                                                                                              Consumed token: <"(" at line 62 column 20>
                                                                                              Call:   expression
                                                                                                Call:   notExpression(LOOKING AHEAD...)
                                                                                                  Visited token: <<IDENT>: "a" at line 62 column 21>; Expected token: <"!">
                                                                                                Return: notExpression(LOOKAHEAD FAILED)
                                                                                                Call:   numcompexpr
                                                                                                  Call:   numexpr
                                                                                                    Call:   term
                                                                                                      Call:   unaryexpr
                                                                                                        Call:   factor
                                                                                                          Call:   lvalue
                                                                                                            Consumed token: <<IDENT>: "a" at line 62 column 21>
                                                                                                          Return: lvalue
                                                                                                        Return: factor
                                                                                                      Return: unaryexpr
                                                                                                    Return: term
                                                                                                  Return: numexpr
                                                                                                Return: numcompexpr
                                                                                                Consumed token: <"^" at line 62 column 22>
                                                                                                Call:   expression
                                                                                                  Call:   notExpression(LOOKING AHEAD...)
                                                                                                    Visited token: <<IDENT>: "b" at line 62 column 23>; Expected token: <"!">
                                                                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                                                                  Call:   numcompexpr
                                                                                                    Call:   numexpr
                                                                                                      Call:   term
                                                                                                        Call:   unaryexpr
                                                                                                          Call:   factor
                                                                                                            Call:   lvalue
                                                                                                              Consumed token: <<IDENT>: "b" at line 62 column 23>
                                                                                                            Return: lvalue
                                                                                                          Return: factor
                                                                                                        Return: unaryexpr
                                                                                                      Return: term
                                                                                                    Return: numexpr
                                                                                                  Return: numcompexpr
                                                                                                Return: expression
                                                                                              Return: expression
                                                                                              Consumed token: <")" at line 62 column 24>
                                                                                            Return: factor
                                                                                          Return: unaryexpr
                                                                                        Return: term
                                                                                      Return: numexpr
                                                                                    Return: numcompexpr
                                                                                  Return: expression
                                                                                Return: printstat
                                                                                Consumed token: <";" at line 62 column 25>
                                                                              Return: statement
                                                                              Call:   statlist
                                                                                Call:   statement
                                                                                  Visited token: <"print" at line 63 column 15>; Expected token: <<IDENT>>
                                                                                  Call:   printstat
                                                                                    Consumed token: <"print" at line 63 column 15>
                                                                                    Call:   expression
                                                                                      Call:   notExpression(LOOKING AHEAD...)
                                                                                        Visited token: <"(" at line 63 column 20>; Expected token: <"!">
                                                                                      Return: notExpression(LOOKAHEAD FAILED)
                                                                                      Call:   numcompexpr
                                                                                        Call:   numexpr
                                                                                          Call:   term
                                                                                            Call:   unaryexpr
                                                                                              Call:   factor
                                                                                                Consumed token: <"(" at line 63 column 20>
                                                                                                Call:   expression
                                                                                                  Call:   notExpression(LOOKING AHEAD...)
                                                                                                    Visited token: <<IDENT>: "a" at line 63 column 21>; Expected token: <"!">
                                                                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                                                                  Call:   numcompexpr
                                                                                                    Call:   numexpr
                                                                                                      Call:   term
                                                                                                        Call:   unaryexpr
                                                                                                          Call:   factor
                                                                                                            Call:   lvalue
                                                                                                              Consumed token: <<IDENT>: "a" at line 63 column 21>
                                                                                                            Return: lvalue
                                                                                                          Return: factor
                                                                                                        Return: unaryexpr
                                                                                                      Return: term
                                                                                                    Return: numexpr
                                                                                                  Return: numcompexpr
                                                                                                  Consumed token: <"^" at line 63 column 22>
                                                                                                  Call:   expression
                                                                                                    Call:   notExpression(LOOKING AHEAD...)
                                                                                                      Visited token: <<IDENT>: "b" at line 63 column 23>; Expected token: <"!">
                                                                                                    Return: notExpression(LOOKAHEAD FAILED)
                                                                                                    Call:   numcompexpr
                                                                                                      Call:   numexpr
                                                                                                        Call:   term
                                                                                                          Call:   unaryexpr
                                                                                                            Call:   factor
                                                                                                              Call:   lvalue
                                                                                                                Consumed token: <<IDENT>: "b" at line 63 column 23>
                                                                                                              Return: lvalue
                                                                                                            Return: factor
                                                                                                          Return: unaryexpr
                                                                                                        Return: term
                                                                                                      Return: numexpr
                                                                                                    Return: numcompexpr
                                                                                                    Consumed token: <"||" at line 63 column 24>
                                                                                                    Call:   expression
                                                                                                      Call:   notExpression(LOOKING AHEAD...)
                                                                                                        Visited token: <"(" at line 63 column 26>; Expected token: <"!">
                                                                                                      Return: notExpression(LOOKAHEAD FAILED)
                                                                                                      Call:   numcompexpr
                                                                                                        Call:   numexpr
                                                                                                          Call:   term
                                                                                                            Call:   unaryexpr
                                                                                                              Call:   factor
                                                                                                                Consumed token: <"(" at line 63 column 26>
                                                                                                                Call:   expression
                                                                                                                  Call:   notExpression(LOOKING AHEAD...)
                                                                                                                    Visited token: <<IDENT>: "b" at line 63 column 27>; Expected token: <"!">
                                                                                                                  Return: notExpression(LOOKAHEAD FAILED)
                                                                                                                  Call:   numcompexpr
                                                                                                                    Call:   numexpr
                                                                                                                      Call:   term
                                                                                                                        Call:   unaryexpr
                                                                                                                          Call:   factor
                                                                                                                            Call:   lvalue
                                                                                                                              Consumed token: <<IDENT>: "b" at line 63 column 27>
                                                                                                                            Return: lvalue
                                                                                                                          Return: factor
                                                                                                                        Return: unaryexpr
                                                                                                                      Return: term
                                                                                                                    Return: numexpr
                                                                                                                  Return: numcompexpr
                                                                                                                  Consumed token: <"&&" at line 63 column 28>
                                                                                                                  Call:   expression
                                                                                                                    Call:   notExpression(LOOKING AHEAD...)
                                                                                                                      Visited token: <"!" at line 63 column 30>; Expected token: <"!">
                                                                                                                      Call:   expression(LOOKING AHEAD...)
                                                                                                                        Call:   notExpression(LOOKING AHEAD...)
                                                                                                                          Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <"!">
                                                                                                                        Return: notExpression(LOOKAHEAD FAILED)
                                                                                                                        Call:   numcompexpr(LOOKING AHEAD...)
                                                                                                                          Call:   numexpr(LOOKING AHEAD...)
                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                              Call:   unaryexpr(LOOKING AHEAD...)
                                                                                                                                Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <"+">
                                                                                                                                Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <"-">
                                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <<int_constant>>
                                                                                                                                  Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <<string_constant>>
                                                                                                                                  Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <<float_constant>>
                                                                                                                                  Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <<byte_constant>>
                                                                                                                                  Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <<long_constant>>
                                                                                                                                  Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <<short_constant>>
                                                                                                                                  Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <"null">
                                                                                                                                  Call:   lvalue(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <<IDENT>>
                                                                                                                                    Visited token: <")" at line 63 column 32>; Expected token: <"[">
                                                                                                                                    Visited token: <")" at line 63 column 32>; Expected token: <".">
                                                                                                                                    Visited token: <")" at line 63 column 32>; Expected token: <".">
                                                                                                                                  Return: lvalue(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: unaryexpr(LOOKAHEAD SUCCEEDED)
                                                                                                                              Visited token: <")" at line 63 column 32>; Expected token: <"*">
                                                                                                                              Visited token: <")" at line 63 column 32>; Expected token: <"/">
                                                                                                                              Visited token: <")" at line 63 column 32>; Expected token: <"%">
                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                            Visited token: <")" at line 63 column 32>; Expected token: <"+">
                                                                                                                            Visited token: <")" at line 63 column 32>; Expected token: <"-">
                                                                                                                          Return: numexpr(LOOKAHEAD SUCCEEDED)
                                                                                                                          Visited token: <")" at line 63 column 32>; Expected token: <"<">
                                                                                                                          Visited token: <")" at line 63 column 32>; Expected token: <">">
                                                                                                                          Visited token: <")" at line 63 column 32>; Expected token: <"<=">
                                                                                                                          Visited token: <")" at line 63 column 32>; Expected token: <">=">
                                                                                                                          Visited token: <")" at line 63 column 32>; Expected token: <"==">
                                                                                                                          Visited token: <")" at line 63 column 32>; Expected token: <"!=">
                                                                                                                        Return: numcompexpr(LOOKAHEAD SUCCEEDED)
                                                                                                                        Visited token: <")" at line 63 column 32>; Expected token: <"&&">
                                                                                                                        Visited token: <")" at line 63 column 32>; Expected token: <"||">
                                                                                                                        Visited token: <")" at line 63 column 32>; Expected token: <"^">
                                                                                                                      Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: notExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                    Call:   notExpression
                                                                                                                      Consumed token: <"!" at line 63 column 30>
                                                                                                                      Call:   expression
                                                                                                                        Call:   notExpression(LOOKING AHEAD...)
                                                                                                                          Visited token: <<IDENT>: "a" at line 63 column 31>; Expected token: <"!">
                                                                                                                        Return: notExpression(LOOKAHEAD FAILED)
                                                                                                                        Call:   numcompexpr
                                                                                                                          Call:   numexpr
                                                                                                                            Call:   term
                                                                                                                              Call:   unaryexpr
                                                                                                                                Call:   factor
                                                                                                                                  Call:   lvalue
                                                                                                                                    Consumed token: <<IDENT>: "a" at line 63 column 31>
                                                                                                                                  Return: lvalue
                                                                                                                                Return: factor
                                                                                                                              Return: unaryexpr
                                                                                                                            Return: term
                                                                                                                          Return: numexpr
                                                                                                                        Return: numcompexpr
                                                                                                                      Return: expression
                                                                                                                    Return: notExpression
                                                                                                                  Return: expression
                                                                                                                Return: expression
                                                                                                                Consumed token: <")" at line 63 column 32>
                                                                                                              Return: factor
                                                                                                            Return: unaryexpr
                                                                                                          Return: term
                                                                                                        Return: numexpr
                                                                                                      Return: numcompexpr
                                                                                                    Return: expression
                                                                                                  Return: expression
                                                                                                Return: expression
                                                                                                Consumed token: <")" at line 63 column 33>
                                                                                              Return: factor
                                                                                            Return: unaryexpr
                                                                                          Return: term
                                                                                        Return: numexpr
                                                                                      Return: numcompexpr
                                                                                    Return: expression
                                                                                  Return: printstat
                                                                                  Consumed token: <";" at line 63 column 34>
                                                                                Return: statement
                                                                                Call:   statlist
                                                                                  Call:   statement
                                                                                    Visited token: <"if" at line 65 column 19>; Expected token: <<IDENT>>
                                                                                    Call:   ifstat
                                                                                      Consumed token: <"if" at line 65 column 19>
                                                                                      Consumed token: <"(" at line 65 column 22>
                                                                                      Call:   expression
                                                                                        Call:   notExpression(LOOKING AHEAD...)
                                                                                          Visited token: <<IDENT>: "a" at line 65 column 23>; Expected token: <"!">
                                                                                        Return: notExpression(LOOKAHEAD FAILED)
                                                                                        Call:   numcompexpr
                                                                                          Call:   numexpr
                                                                                            Call:   term
                                                                                              Call:   unaryexpr
                                                                                                Call:   factor
                                                                                                  Call:   lvalue
                                                                                                    Consumed token: <<IDENT>: "a" at line 65 column 23>
                                                                                                  Return: lvalue
                                                                                                Return: factor
                                                                                              Return: unaryexpr
                                                                                            Return: term
                                                                                          Return: numexpr
                                                                                        Return: numcompexpr
                                                                                        Consumed token: <"^" at line 65 column 24>
                                                                                        Call:   expression
                                                                                          Call:   notExpression(LOOKING AHEAD...)
                                                                                            Visited token: <<IDENT>: "b" at line 65 column 25>; Expected token: <"!">
                                                                                          Return: notExpression(LOOKAHEAD FAILED)
                                                                                          Call:   numcompexpr
                                                                                            Call:   numexpr
                                                                                              Call:   term
                                                                                                Call:   unaryexpr
                                                                                                  Call:   factor
                                                                                                    Call:   lvalue
                                                                                                      Consumed token: <<IDENT>: "b" at line 65 column 25>
                                                                                                    Return: lvalue
                                                                                                  Return: factor
                                                                                                Return: unaryexpr
                                                                                              Return: term
                                                                                            Return: numexpr
                                                                                          Return: numcompexpr
                                                                                        Return: expression
                                                                                      Return: expression
                                                                                      Consumed token: <")" at line 65 column 26>
                                                                                      Call:   statement
                                                                                        Visited token: <"{" at line 65 column 27>; Expected token: <<IDENT>>
                                                                                        Consumed token: <"{" at line 65 column 27>
                                                                                        Call:   statlist
                                                                                          Call:   statement
                                                                                            Visited token: <"print" at line 66 column 25>; Expected token: <<IDENT>>
                                                                                            Call:   printstat
                                                                                              Consumed token: <"print" at line 66 column 25>
                                                                                              Call:   expression
                                                                                                Call:   notExpression(LOOKING AHEAD...)
                                                                                                  Visited token: <"(" at line 66 column 30>; Expected token: <"!">
                                                                                                Return: notExpression(LOOKAHEAD FAILED)
                                                                                                Call:   numcompexpr
                                                                                                  Call:   numexpr
                                                                                                    Call:   term
                                                                                                      Call:   unaryexpr
                                                                                                        Call:   factor
                                                                                                          Consumed token: <"(" at line 66 column 30>
                                                                                                          Call:   expression
                                                                                                            Call:   notExpression(LOOKING AHEAD...)
                                                                                                              Visited token: <<string_constant>: ""qualquer coisa"" at line 66 column 31>; Expected token: <"!">
                                                                                                            Return: notExpression(LOOKAHEAD FAILED)
                                                                                                            Call:   numcompexpr
                                                                                                              Call:   numexpr
                                                                                                                Call:   term
                                                                                                                  Call:   unaryexpr
                                                                                                                    Call:   factor
                                                                                                                      Consumed token: <<string_constant>: ""qualquer coisa"" at line 66 column 31>
                                                                                                                    Return: factor
                                                                                                                  Return: unaryexpr
                                                                                                                Return: term
                                                                                                              Return: numexpr
                                                                                                            Return: numcompexpr
                                                                                                          Return: expression
                                                                                                          Consumed token: <")" at line 66 column 47>
                                                                                                        Return: factor
                                                                                                      Return: unaryexpr
                                                                                                    Return: term
                                                                                                  Return: numexpr
                                                                                                Return: numcompexpr
                                                                                              Return: expression
                                                                                            Return: printstat
                                                                                            Consumed token: <";" at line 66 column 48>
                                                                                          Return: statement
                                                                                        Return: statlist
                                                                                        Consumed token: <"}" at line 67 column 19>
                                                                                      Return: statement
                                                                                    Return: ifstat
                                                                                  Return: statement
                                                                                  Call:   statlist
                                                                                    Call:   statement
                                                                                      Visited token: <<IDENT>: "boolean" at line 69 column 11>; Expected token: <<IDENT>>
                                                                                      Visited token: <<IDENT>: "terminou" at line 69 column 19>; Expected token: <<IDENT>>
                                                                                      Call:   vardecl
                                                                                        Consumed token: <<IDENT>: "boolean" at line 69 column 11>
                                                                                        Consumed token: <<IDENT>: "terminou" at line 69 column 19>
                                                                                      Return: vardecl
                                                                                      Consumed token: <";" at line 69 column 27>
                                                                                    Return: statement
                                                                                    Call:   statlist
                                                                                      Call:   statement
                                                                                        Visited token: <<IDENT>: "terminou" at line 70 column 17>; Expected token: <<IDENT>>
                                                                                        Visited token: <"=" at line 70 column 26>; Expected token: <<IDENT>>
                                                                                        Call:   atribstat
                                                                                          Call:   lvalue
                                                                                            Consumed token: <<IDENT>: "terminou" at line 70 column 17>
                                                                                          Return: lvalue
                                                                                          Consumed token: <"=" at line 70 column 26>
                                                                                          Call:   expression
                                                                                            Call:   notExpression(LOOKING AHEAD...)
                                                                                              Visited token: <<IDENT>: "True" at line 70 column 28>; Expected token: <"!">
                                                                                            Return: notExpression(LOOKAHEAD FAILED)
                                                                                            Call:   numcompexpr
                                                                                              Call:   numexpr
                                                                                                Call:   term
                                                                                                  Call:   unaryexpr
                                                                                                    Call:   factor
                                                                                                      Call:   lvalue
                                                                                                        Consumed token: <<IDENT>: "True" at line 70 column 28>
                                                                                                      Return: lvalue
                                                                                                    Return: factor
                                                                                                  Return: unaryexpr
                                                                                                Return: term
                                                                                              Return: numexpr
                                                                                            Return: numcompexpr
                                                                                          Return: expression
                                                                                        Return: atribstat
                                                                                        Consumed token: <";" at line 70 column 32>
                                                                                      Return: statement
                                                                                    Return: statlist
                                                                                  Return: statlist
                                                                                Return: statlist
                                                                              Return: statlist
                                                                            Return: statlist
                                                                          Return: statlist
                                                                        Return: statlist
                                                                      Return: statlist
                                                                    Return: statlist
                                                                  Return: statlist
                                                                Return: statlist
                                                              Return: statlist
                                                              Consumed token: <"}" at line 71 column 12>
                                                            Return: statement
                                                          Return: methodbody
                                                        Return: methoddecl
                                                        Consumed token: <"}" at line 73 column 1>
                                                      Return: classbody
                                                    Return: classdecl
                                                    Call:   classlist(LOOKING AHEAD...)
                                                      Call:   classdecl(LOOKING AHEAD...)
                                                        Visited token: <<EOF> at line 73 column 3>; Expected token: <"public">
                                                        Visited token: <<EOF> at line 73 column 3>; Expected token: <"private">
                                                        Visited token: <<EOF> at line 73 column 3>; Expected token: <"protected">
                                                        Visited token: <<EOF> at line 73 column 3>; Expected token: <"class">
                                                      Return: classdecl(LOOKAHEAD FAILED)
                                                    Return: classlist(LOOKAHEAD FAILED)
                                                  Return: classlist
                                                  Consumed token: <<EOF> at line 73 column 3>
                                                Return: program
0 Lexical Errors found
0 Syntactic Errors found

1: ListNode (ClassDeclNode)  ===> 2 null
2: ClassDeclNode ===> public testeCompila null 3
3: ClassBodyNode ===> null 4 null 20
4: ListNode (VarDeclNode) ===> 5 8
5: VarDeclNode ===> private final int 6
6: ListNode (VarNode) ===> 7 null
7: VarNode ===> variavelByte1
8: ListNode (VarDeclNode) ===> 9 null
9: VarDeclNode ===> null null float 10
10: ListNode (VarNode) ===> 11 null
11: VarNode ===> f
12: ListNode (AtribNode) ===> 13 16
13: AtribNode ===> 14 15
14: VarNode ===> variavelByte1
15: IntConstNode ===> 22
16: ListNode (AtribNode) ===> 17 null
17: AtribNode ===> 18 19
18: VarNode ===> f
19: FloatConstNode ===> 12.21
20: ListNode (MethodDeclNode) ===> 21 33
21: MethodDeclNode ===> protected null int testeByte 22
22: MethodBodyNode ===> null 23
23: BlockNode ===> 24
24: ListNode (StatementNode) ===> 25 null
25: IfNode ===> 26 29 null
26: RelationalNode ===> 27 > 28
27: VarNode ===> variavelByte1
28: IntConstNode ===> 2
29: BlockNode ===> 30
30: ListNode (StatementNode) ===> 31 null
31: PrintNode ===> 32
32: VarNode ===> variavelByte1
33: ListNode (MethodDeclNode) ===> 34 62
34: MethodDeclNode ===> private null Batata testeShort 35
35: MethodBodyNode ===> null 36
36: BlockNode ===> 37
37: ListNode (StatementNode) ===> 38 41
38: VarDeclNode ===> null null short 39
39: ListNode (VarNode) ===> 40 null
40: VarNode ===> variavelShort1
41: ListNode (StatementNode) ===> 42 45
42: AtribNode ===> 43 44
43: VarNode ===> variavelShort1
44: IntConstNode ===> 6
45: ListNode (StatementNode) ===> 46 null
46: IfNode ===> 47 50 54
47: RelationalNode ===> 48 == 49
48: VarNode ===> variavelShort1
49: IntConstNode ===> 6
50: BlockNode ===> 51
51: ListNode (StatementNode) ===> 52 null
52: PrintNode ===> 53
53: VarNode ===> variavelShort1
54: BlockNode ===> 55
55: ListNode (StatementNode) ===> 56 null
56: PrintNode ===> 57
57: RelationalNode ===> 58 > 59
58: VarNode ===> variavelShort1
59: MultNode ===> 60 % 61
60: IntConstNode ===> 6
61: IntConstNode ===> 1
62: ListNode (MethodDeclNode) ===> 63 79
63: MethodDeclNode ===> null final Repolho testeLong 64
64: MethodBodyNode ===> null 65
65: BlockNode ===> 66
66: ListNode (StatementNode) ===> 67 70
67: VarDeclNode ===> null null long 68
68: ListNode (VarNode) ===> 69 null
69: VarNode ===> variavelLong1
70: ListNode (StatementNode) ===> 71 null
71: IfNode ===> 72 75 null
72: RelationalNode ===> 73 != 74
73: VarNode ===> variavelLong1
74: LongConstNode ===> 18837891L
75: BlockNode ===> 76
76: ListNode (StatementNode) ===> 77 null
77: PrintNode ===> 78
78: VarNode ===> variavelLong1
79: ListNode (MethodDeclNode) ===> 80 100
80: MethodDeclNode ===> public null string testeFloat 81
81: MethodBodyNode ===> null 82
82: BlockNode ===> 83
83: ListNode (StatementNode) ===> 84 87
84: VarDeclNode ===> null null float 85
85: ListNode (VarNode) ===> 86 null
86: VarNode ===> variavelFloat1
87: ListNode (StatementNode) ===> 88 91
88: AtribNode ===> 89 90
89: VarNode ===> variavelFloat1
90: FloatConstNode ===> 11.83
91: ListNode (StatementNode) ===> 92 null
92: IfNode ===> 93 96 null
93: RelationalNode ===> 94 < 95
94: VarNode ===> variavelFloat1
95: FloatConstNode ===> 18.88
96: BlockNode ===> 97
97: ListNode (StatementNode) ===> 98 null
98: PrintNode ===> 99
99: VarNode ===> variavelFloat1
100: ListNode (MethodDeclNode) ===> 101 null
101: MethodDeclNode ===> public final int testeOperadoresLogicos 102
102: MethodBodyNode ===> null 103
103: BlockNode ===> 104
104: ListNode (StatementNode) ===> 105 108
105: VarDeclNode ===> null null boolean 106
106: ListNode (VarNode) ===> 107 null
107: VarNode ===> a
108: ListNode (StatementNode) ===> 109 112
109: AtribNode ===> 110 111
110: VarNode ===> a
111: VarNode ===> true
112: ListNode (StatementNode) ===> 113 116
113: VarDeclNode ===> null null boolean 114
114: ListNode (VarNode) ===> 115 null
115: VarNode ===> b
116: ListNode (StatementNode) ===> 117 120
117: AtribNode ===> 118 119
118: VarNode ===> b
119: VarNode ===> false
120: ListNode (StatementNode) ===> 121 125
121: PrintNode ===> 122
122: RelationalNode ===> 123 && 124
123: VarNode ===> a
124: VarNode ===> b
125: ListNode (StatementNode) ===> 126 130
126: PrintNode ===> 127
127: RelationalNode ===> 128 || 129
128: VarNode ===> a
129: VarNode ===> b
130: ListNode (StatementNode) ===> 131 136
131: PrintNode ===> 132
132: NotNode ===> ! 133
133: RelationalNode ===> 134 && 135
134: VarNode ===> a
135: VarNode ===> b
136: ListNode (StatementNode) ===> 137 141
137: PrintNode ===> 138
138: RelationalNode ===> 139 ^ 140
139: VarNode ===> a
140: VarNode ===> b
141: ListNode (StatementNode) ===> 142 151
142: PrintNode ===> 143
143: RelationalNode ===> 144 ^ 145
144: VarNode ===> a
145: RelationalNode ===> 146 || 147
146: VarNode ===> b
147: RelationalNode ===> 148 && 149
148: VarNode ===> b
149: NotNode ===> ! 150
150: VarNode ===> a
151: ListNode (StatementNode) ===> 152 160
152: IfNode ===> 153 156 null
153: RelationalNode ===> 154 ^ 155
154: VarNode ===> a
155: VarNode ===> b
156: BlockNode ===> 157
157: ListNode (StatementNode) ===> 158 null
158: PrintNode ===> 159
159: StringConstNode ===> "qualquer coisa"
160: ListNode (StatementNode) ===> 161 164
161: VarDeclNode ===> null null boolean 162
162: ListNode (VarNode) ===> 163 null
163: VarNode ===> terminou
164: ListNode (StatementNode) ===> 165 null
165: AtribNode ===> 166 167
166: VarNode ===> terminou
167: VarNode ===> True

Process finished with exit code 0
